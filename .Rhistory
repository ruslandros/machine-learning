x1 <-x + 1 ## Constant c
a<-lm(y~x)
summary(a)
b<- lm(y~x1)
summary(b)
x1
x1 <-x + 0.1 ## Constant c
a<-lm(y~x)
summary(a)
b<- lm(y~x1)
summary(b)
0.1185 - 0.1162
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
x1 <-x + 0.1 ## Constant c
a<-lm(y~x)
summary(a)
b<- lm(y~x1)
summary(b)
y_hat = 0.1885 + 0.7224 * X
b1_hat = 0.7224
c = 0.1
c * b1_hat
b1_hat + c
b0_hat + (c * b1_hat)
b0_hat = 0.1885
b0_hat + (c * b1_hat)
b0_hat - (c * b1_hat)
fit9.1 <- lm(mpg ~ wt, data=mtcars)
summary(fit9.1)
fit9.2 <- lm(mpg ~ 1, data=mtcars)
summary(fit9.2)
3.046/6.027
1.8776/1.065
0.5591/1.065
sum(fit9.1$residuals^2)
sum(fit9.2$residuals^2)
a <- sum(fit9.1$residuals^2)
b <- sum(fit9.2$residuals^2)
a/b
a/b
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
Sys.getenv("PATH")
system('g++ -v')
system('where make')
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
library(rvest)
library(XML)
sessionInfo()
library(XML)
library(rvest)
library(XML)
library(rvest)
install.packages("rvest")
library(rvest)
install.packages("rvest", dependencies=TRUE)
library(rvest)
library(XML)
library(rvest)
url <- "http://sdvi2.fama.net.my/price/direct/price/daily_commodityRptPrev.asp?Pricing=A&LevelCd=04&PricingDt=2016/1/5&PricingDtAft=2016/1/7"
mypage <- read_html(url)
tbls <- html_nodes(mypage, "table")
str(tbls)
pusat_count <- length(tbls)
pusat_count
hdr_1 <- tbls[[1]]
mydf_1 <- html_table(hdr_1, fill=TRUE)
mydf_1[2,1] # header
splitNames = strsplit(mydf_1[2,1],"\\,")
tarikh <- splitNames[[1]][2]
z <- as.Date(tarikh, "%d %b %Y")
z
tarikh <- " 5 JANUARY 2016"
z <- as.Date(tarikh, "%d %b %Y")
price_type <- splitNames[[1]][1]
if ( length(grep("LADANG", price_type)) ) {
filename <- "LADANG"
} else if ( length(grep("RUNCIT", price_type)) ) {
filename <- "RUNCIT"
} else if ( length(grep("BORONG", price_type)) ) {
filename <- "BORONG"
} else
filename <- "UNKNOWN"
filename
z
mydf <- data.frame()
i <- 2
while ( i < pusat_count ) {
print(i)
pusat_info <- html_table(tbls[[i]])
splitNames = strsplit(pusat_info[1,1],"\\:")
pusat_state <- splitNames[[1]][2]
pusat_state
splitNames = strsplit(pusat_state,"\\,")
pusat <- splitNames[[1]][1]
negeri <- splitNames[[1]][2]
i <- i +1;
pusat_price <- html_table(tbls[[i]], fill=TRUE)
pusat_price <- pusat_price[3:nrow(pusat_price),] # get the data only
pusat_price$pusat  <- pusat
pusat_price$negeri  <- negeri
pusat_price$tarikh  <- z
mydf <- rbind(mydf, pusat_price)
i <- i +1;
}
# replace column names
names(mydf) <- c("Nama Varieti", "Gred", "Unit", "Harga Tinggi", "Harga Purata", "Harga Rendah", "Pusat", "Negeri", "Tarikh")
#filename <- "BORONG"
#filename <- paste0( filename, "-")
filename <- paste0( filename, tarikh)
filename <- gsub(" ","_",filename)
filename <- paste0(filename, ".csv")
filename
write.csv(mydf, filename, row.names = FALSE)
url <- "http://sdvi2.fama.net.my/price/direct/price/daily_commodityRpt.asp?Pricing=A&LevelCd=04&PricingDt=2016/1/7&PricingDtPrev=2016/1/5"
mypage <- read_html(url)
tbls <- html_nodes(mypage, "table")
str(tbls)
pusat_count <- length(tbls)
pusat_count
hdr_1 <- tbls[[1]]
mydf_1 <- html_table(hdr_1, fill=TRUE)
mydf_1[2,1] # header
splitNames = strsplit(mydf_1[2,1],"\\,")
tarikh <- " 7 JANUARY 2016"
z <- as.Date(tarikh, "%d %b %Y")
price_type <- splitNames[[1]][1]
if ( length(grep("LADANG", price_type)) ) {
filename <- "LADANG"
} else if ( length(grep("RUNCIT", price_type)) ) {
filename <- "RUNCIT"
} else if ( length(grep("BORONG", price_type)) ) {
filename <- "BORONG"
} else
filename <- "UNKNOWN"
filename
z
mydf <- data.frame()
i <- 2
while ( i < pusat_count ) {
print(i)
pusat_info <- html_table(tbls[[i]])
splitNames = strsplit(pusat_info[1,1],"\\:")
pusat_state <- splitNames[[1]][2]
pusat_state
splitNames = strsplit(pusat_state,"\\,")
pusat <- splitNames[[1]][1]
negeri <- splitNames[[1]][2]
i <- i +1;
pusat_price <- html_table(tbls[[i]], fill=TRUE)
pusat_price <- pusat_price[3:nrow(pusat_price),] # get the data only
pusat_price$pusat  <- pusat
pusat_price$negeri  <- negeri
pusat_price$tarikh  <- z
mydf <- rbind(mydf, pusat_price)
i <- i +1;
}
# replace column names
names(mydf) <- c("Nama Varieti", "Gred", "Unit", "Harga Tinggi", "Harga Purata", "Harga Rendah", "Pusat", "Negeri", "Tarikh")
#filename <- "BORONG"
#filename <- paste0( filename, "-")
filename <- paste0( filename, tarikh)
filename <- gsub(" ","_",filename)
filename <- paste0(filename, ".csv")
filename
write.csv(mydf, filename, row.names = FALSE)
url <- "http://sdvi2.fama.net.my/price/direct/price/daily_commodityRptPrev.asp?Pricing=A&LevelCd=03&PricingDt=2016/1/5&PricingDtAft=2016/1/7"
mypage <- read_html(url)
tbls <- html_nodes(mypage, "table")
str(tbls)
pusat_count <- length(tbls)
pusat_count
hdr_1 <- tbls[[1]]
mydf_1 <- html_table(hdr_1, fill=TRUE)
mydf_1[2,1] # header
splitNames = strsplit(mydf_1[2,1],"\\,")
tarikh <- " 5 JANUARY 2016"
z <- as.Date(tarikh, "%d %b %Y")
price_type <- splitNames[[1]][1]
if ( length(grep("LADANG", price_type)) ) {
filename <- "LADANG"
} else if ( length(grep("RUNCIT", price_type)) ) {
filename <- "RUNCIT"
} else if ( length(grep("BORONG", price_type)) ) {
filename <- "BORONG"
} else
filename <- "UNKNOWN"
filename
z
mydf <- data.frame()
i <- 2
while ( i < pusat_count ) {
print(i)
pusat_info <- html_table(tbls[[i]])
splitNames = strsplit(pusat_info[1,1],"\\:")
pusat_state <- splitNames[[1]][2]
pusat_state
splitNames = strsplit(pusat_state,"\\,")
pusat <- splitNames[[1]][1]
negeri <- splitNames[[1]][2]
i <- i +1;
pusat_price <- html_table(tbls[[i]], fill=TRUE)
pusat_price <- pusat_price[3:nrow(pusat_price),] # get the data only
pusat_price$pusat  <- pusat
pusat_price$negeri  <- negeri
pusat_price$tarikh  <- z
mydf <- rbind(mydf, pusat_price)
i <- i +1;
}
# replace column names
names(mydf) <- c("Nama Varieti", "Gred", "Unit", "Harga Tinggi", "Harga Purata", "Harga Rendah", "Pusat", "Negeri", "Tarikh")
#filename <- "BORONG"
#filename <- paste0( filename, "-")
filename <- paste0( filename, tarikh)
filename <- gsub(" ","_",filename)
filename <- paste0(filename, ".csv")
filename
write.csv(mydf, filename, row.names = FALSE)
url <- "http://sdvi2.fama.net.my/price/direct/price/daily_commodityRpt.asp?Pricing=A&LevelCd=03&PricingDt=2016/1/7&PricingDtPrev=2016/1/5"
mypage <- read_html(url)
tbls <- html_nodes(mypage, "table")
str(tbls)
pusat_count <- length(tbls)
pusat_count
hdr_1 <- tbls[[1]]
mydf_1 <- html_table(hdr_1, fill=TRUE)
mydf_1[2,1] # header
splitNames = strsplit(mydf_1[2,1],"\\,")
tarikh <- " 7 JANUARY 2016"
z <- as.Date(tarikh, "%d %b %Y")
price_type <- splitNames[[1]][1]
if ( length(grep("LADANG", price_type)) ) {
filename <- "LADANG"
} else if ( length(grep("RUNCIT", price_type)) ) {
filename <- "RUNCIT"
} else if ( length(grep("BORONG", price_type)) ) {
filename <- "BORONG"
} else
filename <- "UNKNOWN"
filename
z
mydf <- data.frame()
i <- 2
while ( i < pusat_count ) {
print(i)
pusat_info <- html_table(tbls[[i]])
splitNames = strsplit(pusat_info[1,1],"\\:")
pusat_state <- splitNames[[1]][2]
pusat_state
splitNames = strsplit(pusat_state,"\\,")
pusat <- splitNames[[1]][1]
negeri <- splitNames[[1]][2]
i <- i +1;
pusat_price <- html_table(tbls[[i]], fill=TRUE)
pusat_price <- pusat_price[3:nrow(pusat_price),] # get the data only
pusat_price$pusat  <- pusat
pusat_price$negeri  <- negeri
pusat_price$tarikh  <- z
mydf <- rbind(mydf, pusat_price)
i <- i +1;
}
# replace column names
names(mydf) <- c("Nama Varieti", "Gred", "Unit", "Harga Tinggi", "Harga Purata", "Harga Rendah", "Pusat", "Negeri", "Tarikh")
#filename <- "BORONG"
#filename <- paste0( filename, "-")
filename <- paste0( filename, tarikh)
filename <- gsub(" ","_",filename)
filename <- paste0(filename, ".csv")
filename
write.csv(mydf, filename, row.names = FALSE)
url <- "http://sdvi2.fama.net.my/price/direct/price/daily_commodityRptPrev.asp?Pricing=A&LevelCd=01&PricingDt=2016/1/5&PricingDtAft=2016/1/7"
mypage <- read_html(url)
tbls <- html_nodes(mypage, "table")
str(tbls)
pusat_count <- length(tbls)
pusat_count
hdr_1 <- tbls[[1]]
mydf_1 <- html_table(hdr_1, fill=TRUE)
mydf_1[2,1] # header
splitNames = strsplit(mydf_1[2,1],"\\,")
tarikh <- " 5 JANUARY 2016"
z <- as.Date(tarikh, "%d %b %Y")
price_type <- splitNames[[1]][1]
if ( length(grep("LADANG", price_type)) ) {
filename <- "LADANG"
} else if ( length(grep("RUNCIT", price_type)) ) {
filename <- "RUNCIT"
} else if ( length(grep("BORONG", price_type)) ) {
filename <- "BORONG"
} else
filename <- "UNKNOWN"
filename
z
mydf <- data.frame()
i <- 2
while ( i < pusat_count ) {
print(i)
pusat_info <- html_table(tbls[[i]])
splitNames = strsplit(pusat_info[1,1],"\\:")
pusat_state <- splitNames[[1]][2]
pusat_state
splitNames = strsplit(pusat_state,"\\,")
pusat <- splitNames[[1]][1]
negeri <- splitNames[[1]][2]
i <- i +1;
pusat_price <- html_table(tbls[[i]], fill=TRUE)
pusat_price <- pusat_price[3:nrow(pusat_price),] # get the data only
pusat_price$pusat  <- pusat
pusat_price$negeri  <- negeri
pusat_price$tarikh  <- z
mydf <- rbind(mydf, pusat_price)
i <- i +1;
}
# replace column names
names(mydf) <- c("Nama Varieti", "Gred", "Unit", "Harga Tinggi", "Harga Purata", "Harga Rendah", "Pusat", "Negeri", "Tarikh")
#filename <- "BORONG"
#filename <- paste0( filename, "-")
filename <- paste0( filename, tarikh)
filename <- gsub(" ","_",filename)
filename <- paste0(filename, ".csv")
filename
write.csv(mydf, filename, row.names = FALSE)
url <- "http://sdvi2.fama.net.my/price/direct/price/daily_commodityRpt.asp?Pricing=A&LevelCd=01&PricingDt=2016/1/7&PricingDtPrev=2016/1/5"
mypage <- read_html(url)
tbls <- html_nodes(mypage, "table")
str(tbls)
pusat_count <- length(tbls)
pusat_count
hdr_1 <- tbls[[1]]
mydf_1 <- html_table(hdr_1, fill=TRUE)
mydf_1[2,1] # header
splitNames = strsplit(mydf_1[2,1],"\\,")
tarikh <- " 7 JANUARY 2016"
z <- as.Date(tarikh, "%d %b %Y")
price_type <- splitNames[[1]][1]
if ( length(grep("LADANG", price_type)) ) {
filename <- "LADANG"
} else if ( length(grep("RUNCIT", price_type)) ) {
filename <- "RUNCIT"
} else if ( length(grep("BORONG", price_type)) ) {
filename <- "BORONG"
} else
filename <- "UNKNOWN"
filename
z
mydf <- data.frame()
i <- 2
while ( i < pusat_count ) {
print(i)
pusat_info <- html_table(tbls[[i]])
splitNames = strsplit(pusat_info[1,1],"\\:")
pusat_state <- splitNames[[1]][2]
pusat_state
splitNames = strsplit(pusat_state,"\\,")
pusat <- splitNames[[1]][1]
negeri <- splitNames[[1]][2]
i <- i +1;
pusat_price <- html_table(tbls[[i]], fill=TRUE)
pusat_price <- pusat_price[3:nrow(pusat_price),] # get the data only
pusat_price$pusat  <- pusat
pusat_price$negeri  <- negeri
pusat_price$tarikh  <- z
mydf <- rbind(mydf, pusat_price)
i <- i +1;
}
# replace column names
names(mydf) <- c("Nama Varieti", "Gred", "Unit", "Harga Tinggi", "Harga Purata", "Harga Rendah", "Pusat", "Negeri", "Tarikh")
#filename <- "BORONG"
#filename <- paste0( filename, "-")
filename <- paste0( filename, tarikh)
filename <- gsub(" ","_",filename)
filename <- paste0(filename, ".csv")
filename
write.csv(mydf, filename, row.names = FALSE)
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install_github('slidifyLibraries', 'ramnathv')
isGeneric(lm)
?isGeneric
library(pryr)
install.packages(pryr)
dgamma
predict()
predict
mean
show
colcums
colSums
lm
dgamma
show
getOption("defaultpackages")
getOption("defaultPackages")
?show
?mean
?lm
?predict
?dgamma
?lm
?colSums
?show
?predict
?dgamma
?lm
library(help="base")
install.packages("pryr")
ftype(show())
library(pryr)
ftype(show)
ftype(lm)
ftype(mean)
ftype(dgamma)
ftype(colSums)
ftype(predict)
setwd("D:/ruslan_d/coursera/machine_learning/project")
library(pROC)
library(caret)
library(kernlab)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
pml_training <- read.csv("pml-training.csv",na.strings=c("NA","","#DIV/0!"))
dim(pml_training)
sum(is.na(pml_training))
tail(pml_training)
str(pml_training)
aa <- pml_training[, colSums(is.na(pml_training)) != nrow(pml_training)]
dim(aa)
sum(is.na(aa))
#only keep columns with at least 50% non-blanks
bb <- pml_training[, colSums(is.na(pml_training)) < nrow(pml_training) * 0.5]
dim(bb)
sum(is.na(bb))
str(bb)
intrain <- createDataPartition(y=bb$classe, p=0.6,list=FALSE)
training <- bb[intrain,]
testing <- bb[-intrain,]
dim(training)
dim(testing)
str(training)
bb[1:6] <- list(NULL)
dim(bb)
str(bb)
intrain <- createDataPartition(y=bb$classe, p=0.6,list=FALSE)
training <- bb[intrain,]
testing <- bb[-intrain,]
dim(training)
dim(testing)
sum(is.na(training))
set.seed(seed)
modelFit<-train(as.factor(classe) ~ ., data=training, method="gbm")
DTmodFit <- train(classe ~ ., method="rpart", data=training)
DTpredict<-predict(DTmodFit, newdata=testing)
confusionMatrix(DTpredict, testing$classe)
fancyRpartPlot(DTmodFit$finalModel)
pml_write_files = function(x){
n = length(x)
for(i in 1:20){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_testing <- read.csv("pml-testing.csv",na.strings=c("NA","","#DIV/0!"))
dim(pml_testing)
str(pml_testing)
cc <- pml_testing[, colSums(is.na(pml_testing)) != nrow(pml_testing)]
dim(cc)
sum(is.na(cc))
cc[1:6] <- list(NULL)
dim(cc)
DTpredict2<-predict(DTmodFit, newdata=cc)
DTpredict2
pml_write_files(DTpredict2)
require(randomForest)
RFmodFit<-train(classe ~ ., method="rf",trControl=trainControl(method="cv",number=10), data=training)
RFmodFit<-train(classe ~ ., method="rf",trControl=trainControl(method="cv",number=5), data=training)
RFpredict<-predict(RFmodFit, newdata=testing)
confusionMatrix(RFpredict, testing$classe)
fancyRpartPlot(DTmodFit$finalModel)
DTpredict2<-predict(RFmodFit, newdata=cc)
DTpredict2
pml_write_files(DTpredict2)
setwd("D:/ruslan_d/coursera/data_products/slidify/data_products")
setwd("D:/ruslan_d/coursera/machine_learning/project")
pml_testing <- read.csv("pml-testing.csv",na.strings=c("NA","","#DIV/0!"))
```{r}
str(tidy_training,10)
tidy_training <- pml_training[, colSums(is.na(pml_training)) < nrow(pml_training) * 0.5]
str(tidy_training,10)
tidy_training[1:6] <- list(NULL)
dim(tidy_training)
sum(is.na(tidy_training))
